{
  "openapi": "3.0.0",
  "info": {
    "description": "SuperMindsIT",
    "version": "1.0.0",
    "title": "Tapzzi API"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local server"
    },
    {
      "url": "https://tapzzi-backend.superminds.dev",
      "description": "Production server"
    }
    ],
  "tags": [
      {
        "name": "Authentication",
        "description": "API for Authentication. "
      },
      {
        "name": "Games",
        "description": "API for Games. "
      },
      {
        "name": "Wallpapers",
        "description": "API for Wallpapers. "
      },
      {
        "name": "Tones",
        "description": "API for Tones. "
      }
    ],
  "paths": {
      "/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Creates a new User",
        "description": "This endpoint will create a new user.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>New User Registered</td>\n    <td>Register the User successfully </td>\n  </tr>\n  <tr>\n    <td>400</td>\n    <td>Bad Request</td>\n    <td>If user have incomplete request body.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Invalid Credentials</td>\n    <td>Invalid username or password</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If internal server error occured</td>\n  </tr>\n</table>",
        "requestBody": {
          "description": "Signup Post Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/signup"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User Created",
            "content": {
              "application/json": {
              "schema": {
              "$ref": "#/components/serverResponseExample/createSignupSuccess"
                }
              }
            }
          }, 
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/serverResponseExample/createSignupError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/serverResponseExample/invalidcredentialsError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/serverResponseExample/serverError"
                }
              }
            }
          }
        }
      }
      },
      "/admin/login": {
        "post": {
          "tags": [
            "Authentication"
          ],
          "summary": "Create a new token",
          "description": "This endpoint will help to login in the system using the Bearer Token.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Token Created</td>\n    <td>Creates the token successfully </td>\n  </tr>\n  <tr>\n    <td>400</td>\n    <td>Bad Request</td>\n    <td>If user have incomplete request body.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Invalid Credentials</td>\n    <td>Invalid username or password</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If internal server error occured</td>\n  </tr>\n</table>",
          "requestBody": {
            "description": "Login Post Object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminlogin"
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Token Created",
              "content": {
                "application/json": {
                "schema": {
                "$ref": "#/components/serverResponseExample/createLoginSuccess"
                  }
                }
              }
            }, 
            "400": {
              "description": "Bad Request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/createLoginError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid Credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/invalidcredentialsError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        }
      },
      "/user/login": {
        "post": {
          "tags": [
            "Authentication"
          ],
          "summary": "Create a new token",
          "description": "This endpoint will help to login in the system using the Bearer Token.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Token Created</td>\n    <td>Creates the token successfully </td>\n  </tr>\n  <tr>\n    <td>400</td>\n    <td>Bad Request</td>\n    <td>If user have incomplete request body.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Invalid Credentials</td>\n    <td>Invalid username or password</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If internal server error occured</td>\n  </tr>\n</table>",
          "requestBody": {
            "description": "Login Post Object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/login"
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Token Created",
              "content": {
                "application/json": {
                "schema": {
                "$ref": "#/components/serverResponseExample/createLoginSuccess"
                  }
                }
              }
            }, 
            "400": {
              "description": "Bad Request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/createLoginError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid Credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/invalidcredentialsError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        }
      },
      "/logout": {
        "delete": {
          "tags": [
            "Authentication"
          ],
          "summary": "Logouts the user",
          "description": "This endpoint will help the user to logout from the system.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Logged Out</td>\n    <td>Successfully logouts from the system.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If token has been revoked.</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "security":[{"JWT": {} }],
          "requestBody": {
            "description": "Logout Post Object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logout"
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Logged out",
              "content": {
                "application/json": {
                "schema": {
                "$ref": "#/components/serverResponseExample/createLogoutSuccess"
                  }
                }
              }
            }, 
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/logoutUnauthorizedError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        }
      },
      "/game": {
        "get": {
          "tags": [
            "Games"
          ],
          "summary": "Return Games",
          "description": "This endpoint will get all games.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Game Data</td>\n    <td>Return all the games.</td>\n  </tr>\n  <tr>\n   <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>", 
          "produces": "['application/json']",
          "responses": {
            "200": {
              "description": "Games Data",
              "content": {
                "application/json": {
                  "example": [
                    {
                    "_id":"655cc081add35235c1c1682c",
                    "description":"Explore and play bite-sized games anytime, anywhere-no downloads, just pure entertainment on the go!",
                    "imageUrl": "www.xyz.com",
                    "title": "Games",
                    "iframe": "http://xyz.com/index.html",
                    "thumbnail": "/assets/games/cricket.jpg"
                  },
                  {
                    "_id":"655cc081add35235c1c1682d",
                    "description":"Explore and play bite-sized games anytime, anywhere-no downloads, just pure entertainment on the go!",
                    "imageUrl": "www.abc.com",
                    "title": "Games",
                    "iframe": "http://xyz.com/index.html",
                    "thumbnail": "/assets/games/football.jpg"
                  }
                ]
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Games"
          ],
          "summary": "Create a new Game",
          "description": "This endpoint will create a new game.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Game Created</td>\n    <td>Returns the created game</td>\n  </tr>\n  <tr>\n    <td>400</td>\n    <td>Bad Request</td>\n    <td>Returns the validation errors.</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "requestBody": {
            "description": "Game Post Object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/game"
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Game Created",
              "content": {
                "application/json": {
                "schema": {
                "$ref": "#/components/serverResponseExample/createGameSuccess"
                  }
                }
              }
            }, 
            "400": { 
              "description": "Bad Request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/createGameError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        }
      },
      "/game/{id}": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the game that we want to match",
            "type": "string"
          }
        ],
        "get": {
          "tags": [
            "Games"
          ],
          "summary": "Get Game with given ID",
          "description": "This endpoint will get Game by given ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Game Data</td>\n    <td>Returns the game with given ID.</td>\n  </tr>\n  <>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Game Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "Game ID",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Game Data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/getGameByIdSuccess"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/getGameByIdNotFoundError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        },
        "put": {
          "summary": "Update a Game by ID",
          "description": "This endpoint will update a game by given ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>game Data</td>\n    <td>Updates the game with given ID.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>game Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "security":[{"JWT": {} }],
          "tags": [
            "Games"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "Update Game",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            }
          ],
          "requestBody": {
            "description": "Update game",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/game"
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Game Data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/updateGameByIdSuccess"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/unauthorizedError"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/getGameByIdNotFoundError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "summary": "Delete Game by ID",
          "description": "This API Endpoint will delete Game by ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Game</td>\n    <td>game Deleted Successfully.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Game Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "security":[{"JWT": {} }],
          "tags": [
            "Games"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "Delete game",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Game Data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/deleteGameByIdSuccess"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/unauthorizedError"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/getGameByIdNotFoundError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        }
      },
      "/game/image": {
        "post": {
          "tags": [
            "Games"
          ],
          "summary": "Upload an Image",
          "description": "This endpoint will upload an image.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n3) The device_type must be one of **mobile, desktop**.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Event Image Uploaded</td>\n    <td>Returns the fileurl.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found Error</td>\n    <td>EventID Not Found</td>\n  </tr>\n  <tr>\n    <td>413</td>\n    <td>Request Entity Too large</td>\n    <td>If request entity is too large</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "security":[{"JWT": {} }],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": { 
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary",
                      "nullable": false
                    },
                    "id": {
                      "type": "string",
                      "format": "string",
                      "nullable": false
                    },
                    "device_type": {
                      "type": "string",
                      "format": "string",
                      "nullable": false
                    }
                  },
                  "required": ["file", "id", "device_type"]
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Game Image Uploaded",
              "content": {
                "application/json": {
                "schema": {
                "$ref": "#/components/serverResponseExample/createGameImageSuccess"
                  }
                }
              }
            }, 
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/unauthorizedError"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/getGameImageByIdNotFoundError"
                  }
                }
              }
            },
            "413": {
              "description": "Request Entity Too large",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/largerEntityError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        }
      },
      "/delete-gameimage": {
        "post": {
          "summary": "Delete image file.",
          "description": "This endpoint will delete the game image.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n3) Object_key is the filename from the file_url: https://tapzzi.fra1.digitaloceanspaces.com/wild-cabarets/**filename** e.g from the file_url: https://wild-cabarets.fra1.digitaloceanspaces.com/wild-cabarets/**mobile/65d5c6c0dfaedf20d9fafa96/sample.png**, **mobile/65d5c6c0dfaedf20d9fafa96/sample.png** is the object_key.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Event Image Deleted</td>\n    <td>Deletes the file successfully.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found Error</td>\n    <td>Event Image Not Found or Deleted.</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "security":[{"JWT": {} }],
          "tags": [
            "Games"
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object_key": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },     
          "responses": {
            "200": {
              "description": "Game Image Data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/deleteGameImageByIdSuccess"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/unauthorizedError"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/deleteGameImageByIdNotFoundError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        }
      },
      "/wallpaper": {
          "get": {
            "tags": [
              "Wallpapers"
            ],
            "summary": "Returns Wallpapers",
            "description": "This endpoint will get all wallpapers.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Wallpaper Data</td>\n    <td>Return all the wallpapers.</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "responses": {
              "200": {
                "description": "Wallpapers Data",
                "content": {
                  "application/json": {
                    "example": [
                      {
                      "_id":"655cc081add35235c1c1682c",
                      "description": "Explore and play bite-sized games anytime, anywhere-no downloads, just pure entertainment on the go!",
                      "imageURL":"/assets/wallpaper.png",
                      "title": "wallpapers",
                      "downloads": "5k",
                      "visited": "9k"
                    },
                    {
                      "_id":"655cc081add35235c1c1682d",
                      "description": "Explore and play bite-sized games anytime, anywhere-no downloads, just pure entertainment on the go!",
                      "imageURL":"/assets/wallpaper.png",
                      "title": "wallpapers",
                      "downloads": "5k",
                      "visited": "9k"
                    }
                  ]
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          },
          "post": {
            "tags": [
              "Wallpapers"
            ],
            "summary": "Create a new Wallpaper",
            "description": "This endpoint will create a new wallpaper.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Wallpaper Request</td>\n    <td>Returns the created wallpaper.</td>\n  </tr>\n  <tr>\n    <td>400</td>\n    <td>Bad Request</td>\n    <td>Returns the validation errors.</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "requestBody": {
              "description": "Wallpaper Request Object",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/wallpaper"
                  }
                }
              }
            },
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "Wallpaper Created",
                "content": {
                  "application/json": {
                  "schema": {
                  "$ref": "#/components/serverResponseExample/createWallpaperSuccess"
                    }
                  }
                }
              }, 
              "400": {
                "description": "Bad Request.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/createWallpaperError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          }
      },
      "/wallpaper/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "ID of the Wallpaper that we want to match",
              "type": "string"
            }
          ],
          "get": {
            "tags": [
              "Wallpapers"
            ],
            "summary": "Get Wallpaper with given ID",
            "description": "This endpoint will get wallpaper by given ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Wallpaper Data</td>\n    <td>Returns the wallpaper with given ID.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Wallpaper Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "parameters": [
              {
                "in": "path",
                "name": "id",
                "required": true,
                "description": "Wallpaper id",
                "schema": {
                  "$ref": "#/components/schemas/id"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Wallpaper Data",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getWallpaperByIdSuccess"
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getWallpaperByIdNotFoundError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          },
          "put": {
            "summary": "Update a Wallpaper by ID",
            "description": "This endpoint will update a wallpaper by given ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Wallpaper Data</td>\n    <td>Updates the wallpaper with given ID.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Wallpaper Request Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "security":[{"JWT": {} }],
            "tags": [
              "Wallpapers"
            ],
            "parameters": [
              {
                "in": "path",
                "name": "id",
                "required": true,
                "description": "Wallpapers",
                "schema": {
                  "$ref": "#/components/schemas/id"
                }
              }
            ],
            "requestBody": {
              "description": "Update a Wallpaper",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/wallpaper"
                  }
                }
              }
            },
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "Wallpaper Data",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/updateWallpaperByIdSuccess"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/unauthorizedError"
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getWallpaperByIdNotFoundError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "summary": "Delete Wallpaper by ID",
            "description": "This API Endpoint will delete wallpaper by ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Wallpaper</td>\n    <td>Wallpaper Deleted Successfully.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Wallpaper Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "security":[{"JWT": {} }],
            "tags": [
              "Wallpapers"
            ],
            "parameters": [
              {
                "in": "path",
                "name": "id",
                "required": true,
                "description": "Wallpaper",
                "schema": {
                  "$ref": "#/components/schemas/id"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Wallpaper Data",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/deleteWallpaperByIdSuccess"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/unauthorizedError"
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getWallpaperByIdNotFoundError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          }
      },
      "/tone": {
          "get": {
            "tags": [
              "Tones"
            ],
            "summary": "Return tones",
            "description": "This endpoint will get all tones.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Tone Data</td>\n    <td>Return all the tones.</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            
            "responses": {
              "200": {
                "description": "Tones Data",
                "content": {
                  "application/json": {
                    "example": [
                      {
                      "_id":"655cc081add35235c1c1682c",
                      "description": "Explore and play bite-sized games anytime, anywhere-no downloads, just pure entertainment on the go!",
                      "audio":"https://xyz.com",
                      "downloads": "5.5k",
                      "title": "Three Little Birds",
                      "urlTitle": "three-little-birds",
                      "visited": "10.5k"
                    },
                    {
                      "_id":"655cc081add35235c1c1682d",
                      "description": "Explore and play bite-sized games anytime, anywhere-no downloads, just pure entertainment on the go!",
                      "audio":"https://xyz.com",
                      "downloads": "5.5k",
                      "title": "Three Little Birds",
                      "urlTitle": "three-little-birds",
                      "visited": "10.5k"
                    }
                  ]
                  }
                }
              },
              
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          },
          "post": {
            "tags": [
              "Tones"
            ],
            "summary": "Create a new tone",
            "description": "This endpoint will create a new tone.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>tone Created</td>\n    <td>Returns the created tone</td>\n  </tr>\n  <tr>\n    <td>400</td>\n    <td>Bad Request</td>\n    <td>Returns the validation errors.</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "requestBody": {
              "description": "tone Object",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/tone"
                  }
                }
              }
            },
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "Tone Created",
                "content": {
                  "application/json": {
                  "schema": {
                  "$ref": "#/components/serverResponseExample/createToneSuccess"
                    }
                  }
                }
              }, 
              "400": {
                "description": "Bad Request.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/createToneError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          }
      },
      "/tone/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "ID of the Tone that we want to match",
              "type": "string"
            }
          ],
          "get": {
            "tags": [
              "Tones"
            ],
            "summary": "Get tone with given ID",
            "description": "This endpoint will get Tone by given ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>tone Data</td>\n    <td>Returns the tone with given ID.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Tone Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "parameters": [
              {
                "in": "path",
                "name": "id",
                "required": true,
                "description": "tone id",
                "schema": {
                  "$ref": "#/components/schemas/id"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Tone Data",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getToneByIdSuccess"
                    }
                  }
                }
              },
              
              "404": {
                "description": "Not Found Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getToneByIdNotFoundError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          },
          "put": {
            "summary": "Update a Tone by ID",
            "description": "This endpoint will update a tone by given ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Tone Data</td>\n    <td>Updates the tone with given ID.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Tone Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "security":[{"JWT": {} }],
            "tags": [
              "Tones"
            ],
            "parameters": [
              {
                "in": "path",
                "name": "id",
                "required": true,
                "description": "Update Tone",
                "schema": {
                  "$ref": "#/components/schemas/id"
                }
              }
            ],
            "requestBody": {
              "description": "Update Tone Object",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/tone"
                  }
                }
              }
            },
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "Tone Data",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/updateToneByIdSuccess"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/unauthorizedError"
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getToneByIdNotFoundError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "summary": "Delete Tone by ID",
            "description": "This API Endpoint will delete Tone by ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>tone</td>\n    <td>Tone Deleted Successfully.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Tone Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "security":[{"JWT": {} }],
            "tags": [
              "Tones"
            ],
            "parameters": [
              {
                "in": "path",
                "name": "id",
                "required": true,
                "description": "Delete Tone",
                "schema": {
                  "$ref": "#/components/schemas/id"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Tone Data",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/deleteToneByIdSuccess"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/unauthorizedError"
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getToneByIdNotFoundError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          }
      }
    },
  "components": {
    "securitySchemes":{
    "JWT":{
          "in": "header",
          "name": "Authorization",
          "type": "apiKey",
          "description": "JWT authorization token. Include 'Bearer' followed by a space and the token value."
        }
      },
    "schemas": {
        "id": {
            "properties": {
              "id": {
                "type": "string"
              }
            }
        },
        "login": {
            "type": "object",
            "required": ["username", "password"],
            "properties": {
                "username": {
                    "type": "string",
                    "format": "string"
                  },
                "password": {
                    "type": "string",
                    "format": "number"
                  }
            }
        },
        "adminlogin": {
          "type": "object",
          "required": ["username", "password", "role"],
          "properties": {
              "username": {
                  "type": "string",
                  "format": "string"
                },
              "password": {
                  "type": "string",
                  "format": "number"
                },
              "role": {
                  "type": "string",
                  "format": "string"
                }
          }
      },
        "signup": {
          "type": "object",
          "required": ["username", "password"],
          "properties": {
              "username": {
                  "type": "string",
                  "format": "string"
                },
              "password": {
                  "type": "string",
                  "format": "string"
                },
              "role": {
                  "type": "string",
                  "format": "string"
                }
          }
        },
        "logout": {
          "type": "object",
          "required": ["username", "password"],
          "properties": {
              "username": {
                  "type": "string",
                  "format": "string"
                },
              "password": {
                  "type": "string",
                  "format": "number"
                }
          }
        },
        "game": {
            "type": "object",
            "required": ["description", "imageUrl", "title"],
            "properties": {
                "description": {
                    "type": "string",
                    "format": "string"
                  },
                "imageUrl": {
                    "type": "string",
                    "format": "string"
                  },
                "title": {
                    "type": "string",
                    "format": "string"
                  },
                "iframe": {
                    "type": "string",
                    "format": "string"
                  },
                "thumbnail": {
                    "type": "string",
                    "format": "string"
                  }
            }
        },
        "tone": {
            "type": "object",
            "required": ["description", "audio", "downloads", "urlTitle", "title", "visited"],
            "properties": {
                  "description": {
                    "type": "string",
                    "format": "string"
                  },
                  "audio": {
                    "type": "string",
                    "format": "string"
                  },
                  "downloads": {
                    "type": "string",
                    "format": "string"
                  },
                  "title": {
                    "type": "string",
                    "format": "string"
                  },
                  "urlTitle": {
                    "type": "string",
                    "format": "string"
                  },
                  "visited": {
                    "type": "string",
                    "format": "string"
                  }
            }
        },
        "wallpaper": {
            "type": "object",
            "required": ["description", "downloads", "imageURL", "title", "visited"],
            "properties": {
                "description": {
                    "type": "string",
                    "format": "string"
                  },
                "imageURL": {
                    "type": "string",
                    "format": "string"
                  },
                "title": {
                    "type": "string",
                    "format": "string"
                  },
                "downloads": {
                    "type": "string",
                    "format": "string"
                  },
                "visited": {
                    "type": "string",
                    "format": "string"
                  }
            }
        }
      },
    "serverResponseExample": {
      "notFound": {
        "message": "Not found"
      },
      "serverError": {
        "example": {       
          "message": "Internal server error"
        }
      },
      "largerEntityError": {
        "example": {
          "msg": "Request Entity Too Large"
        }
      },
      "logoutUnauthorizedError": {
        "example": {
          "msg": "Token has been revoked"
        }
      },
      "invalidcredentialsError": {
        "example": {
          "msg": "Invalid Username or Password"
        }
      },
      "unauthorizedError": {
        "example": {
          "msg": "Missing Authorization Header"
        }
      },
      "createLoginError": {
        "example": {        
          "message": "Username is required, Password is required"
        }
      },
      "createSignupError": {
        "example": {          
          "message": "Username is required, Password is required, Role is required for Admins"
        }
      },
      "createLogoutError": {
        "example": {
          "message": "Access Token is required "
        }
      },
      "createGameError": {
        "example": {          
          "message": "Description is required, Title is required, ImageUrl is required"
        }
      },
      "createWallpaperError": {
        "example": {         
          "message": "Description is required, Title is required, UrlTitle is required"
        }
      },
      "createToneError": {
        "example": {
          "message": "Audio is required, Title is required, UrlTitle is required"
        }
      },
      "createLoginSuccess": {
        "example": {
          "access_token" :"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcwMTMyNDI0NSwianRpIjoiMGJkNWI2ZGQtYjc5Yy00ODBkLWE3NzAtMzMyYmVkMWFkMWU3IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6InVzZXIxIiwibmJmIjoxNzAxMzI0MjQ1LCJleHAiOjE3MDEzMjUxNDV9.E1nzEIXCqMMmmE5eGbo6zdEOpVFV_bWeqFzzZ8Zg_48"
        }
      },
      "createSignupSuccess": {
        "example": {
          "message": "User registered successfully"
        }
      },
      "createLogoutSuccess": {
        "example": {
          "message": "Successfully logged out"
        }
      },
      "createGameSuccess": {
        "example": {
          "_id":"655cc081add35235c1c1682c",
          "description":"Explore and play bite-sized games anytime, anywhere-no downloads, just pure entertainment on the go!",
          "imageUrl": "www.xyz.com",
          "title": "Games",
          "iframe": "http://xyz.com/index.html",
          "thumbnail": "/assets/games/cricket.jpg"
        }
      },
      "createWallpaperSuccess": {
        "example": {
          "_id":"655cc081add35235c1c1682c",
          "description": "Explore and play bite-sized games anytime, anywhere-no downloads, just pure entertainment on the go!",
          "imageURL":"/assets/wallpaper.png",
          "title": "wallpapers",
          "downloads": "5k",
          "visited": "9k"
        }
      },
      "createToneSuccess": {
        "example": {
          "_id":"655cc081add35235c1c1682c",
          "description": "Explore and play bite-sized games anytime, anywhere-no downloads, just pure entertainment on the go!",
          "audio":"https://xyz.com",
          "downloads": "5.5k",
          "title": "Three Little Birds",
          "urlTitle": "three-little-birds",
          "visited": "10.5k"
        }
      },
      "createGameImageSuccess": {
        "example": {
          "file_url": "https://tapzzi.fra1.digitaloceanspaces.com/tapzzi/filename"
        }
      },
      "getGameByIdSuccess": {
        "example": {
          "_id":"655cc081add35235c1c1682c",
          "description":"Explore and play bite-sized games anytime, anywhere-no downloads, just pure entertainment on the go!",
          "imageUrl": "www.xyz.com",
          "title": "Games",
          "iframe": "http://xyz.com/index.html",
          "thumbnail": "/assets/games/cricket.jpg"
        }
      },
      "getWallpaperByIdSuccess": {
        "example": {
          "_id":"655cc081add35235c1c1682c",
          "description": "Explore and play bite-sized games anytime, anywhere-no downloads, just pure entertainment on the go!",
          "imageURL":"/assets/wallpaper.png",
          "title": "wallpapers",
          "downloads": "5k",
          "visited": "9k"
        }
      },
      "getToneByIdSuccess": {
        "example": {
          "_id":"655cc081add35235c1c1682c",
          "description": "Explore and play bite-sized games anytime, anywhere-no downloads, just pure entertainment on the go!",
          "audio":"https://xyz.com",
          "downloads": "5.5k",
          "title": "Three Little Birds",
          "urlTitle": "three-little-birds",
          "visited": "10.5k"
        }
      },
      "getGameByIdNotFoundError": {
        "example": {
          "message": "Game not found" 
        }
      },
      "getGameImageByIdNotFoundError": {
        "example": {
          "message": "Invalid Object ID or File not found" 
        }
      },
      "getWallpaperByIdNotFoundError": {
        "example": {
          "message": "Wallpaper not found" 
        }
      },
      "getToneByIdNotFoundError": {
        "example": {
          "message": "Tone not found" 
        }
      },
      "updateGameByIdSuccess": {
        "example": {
          "_id":"655cc081add35235c1c1682c",
          "description":"Explore and play bite-sized games anytime, anywhere-no downloads, just pure entertainment on the go!",
          "imageUrl": "www.xyz.com",
          "title": "Games",
          "iframe": "http://xyz.com/index.html",
          "thumbnail": "/assets/games/cricket.jpg"
        }
      },
      "updateWallpaperByIdSuccess": {
        "example": {
          "_id":"655cc081add35235c1c1682c",
          "description": "Explore and play bite-sized games anytime, anywhere-no downloads, just pure entertainment on the go!",
          "imageURL":"/assets/wallpaper.png",
          "title": "wallpapers",
          "downloads": "5k",
          "visited": "9k"
        }
      },
      "updateToneByIdSuccess": {
        "example": {
          "_id":"655cc081add35235c1c1682c",
          "description": "Explore and play bite-sized games anytime, anywhere-no downloads, just pure entertainment on the go!",
          "audio":"https://xyz.com",
          "downloads": "5.5k",
          "title": "Three Little Birds",
          "urlTitle": "three-little-birds",
          "visited": "10.5k"
        }
      },
      "deleteGameByIdSuccess": {
        "example": {
          "message": "Game Deleted successfully"
        }
      },
      "deleteWallpaperByIdSuccess": {
        "example": {
          "message": "Wallpaper Deleted successfully"
        }
      },
      "deleteGameImageByIdSuccess": {
        "example": {
          "message": "Game Image Deleted successfully"
        }
      },
      "deleteGameImageByIdNotFoundError": {
        "example": {
          "message": "Invalid Object Key" 
        }
      },
      "deleteToneByIdSuccess": {
        "example": {
          "message": "Tone Deleted successfully"
        }
      }
      }
    }
  }